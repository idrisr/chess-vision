# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_generate_screenshot_images.ipynb (unless otherwise specified).

__all__ = ['Composite', 'df', 'ax', 'df', 'ax', 'fig', 'gs', 'fig', 'gs', 'BoardGenerator', 'SSComposite', 'get_images',
           'train_imgs', 'test_imgs', 'val_imgs', 'a', 'b', 'c', 'comps']

# Cell
from cairosvg import svg2png
import chess
import json
from random import randint
from pathlib import Path
from IPython import display
from PIL import Image, ImageDraw
from dataclasses import dataclass
from typing import List, Dict, Tuple
from pdb import set_trace
from itertools import zip_longest
import pandas as pd
from io import BytesIO
from fastai.vision.utils import get_image_files

# Cell
import json
from random import randint
from pathlib import Path
from IPython import display
from PIL import Image, ImageDraw
from dataclasses import dataclass
from itertools import zip_longest
import pandas as pd
from io import BytesIO
import matplotlib.pyplot as plt

# Cell
class Composite:
    def __init__(self, board, website):
        self.board = board
        self.website = website

    def composite(self):
        pass

# Cell
df = pd.DataFrame([Image.open(wbs[i]).shape for i in range(len(wbs))], columns=['height', 'width'])
ax = df.plot()
ax.set_title("website height and width")

# Cell
df = pd.DataFrame([Image.open(bss[i]).shape for i in range(len(bss))], columns=['height', 'width'])
ax = df.plot()
ax.set_title("board height and width")

# Cell
fig = plt.figure(figsize=(10, 10))
gs = fig.add_gridspec(4, 4)
for i in range(16):
    j = i // 4
    k = i % 4
    ax = fig.add_subplot(gs[j, k])
    ax.set_xticks([])
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    idx = randint(0, len(bss))
    ax.matshow(Image.open(bss[idx]))

# Cell
fig = plt.figure(figsize=(10, 10))
fig.tight_layout()
gs = fig.add_gridspec(4, 4)
for i in range(16):
    j = i // 4
    k = i % 4
    ax = fig.add_subplot(gs[j, k])
    ax.set_xticks([])
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    idx = randint(0, len(wbs))
    ax.matshow(Image.open(wbs[idx]))

# Cell
class BoardGenerator:
    def __init__(self, pgn):
        self.pgn = open(pgn)

    def get_boards(self):
        boards = []
        for i in range(30):
            game = chess.pgn.read_game(self.pgn)
            board = game.board()
            for i, move in enumerate(game.mainline_moves()):
                board.push(move)
                boards.append(board.copy())

        # todo: use yield
        return boards

# Cell
class SSComposite:
    """ class for compositing a board onto a screenshot"""

    def __init__(self, df, output_dir):
        self.df = df
        self.output_dir = output_dir
        self.anno = {}
        self.anno['train'] = []
        self.anno['test'] = []
        self.anno['valid'] = []

    def composite(self):
        """ composite boards with screenshot"""

        for _, row in df.iterrows():
            image_f = row['image_f']
            dataset = row['dataset']
            board = row['board']

            # BUG IS HERE
            min_size = 100
            image = Image.open(image_f.as_posix())

            x = randint(0, image.size[0] - min_size)
            y = randint(0, image.size[1] - min_size)
            max_size = min(image.size[0] - x, image.size[1] - y)
            board_size = randint(min_size, max_size)
            board_image =  Image.open(BytesIO(self._render_board(board, board_size)))
            image.paste(board_image, (x, y))

            # adjust x y so it's at center of board as excepted by createml
            coord = {'x': x + int(board_size/2),
                 'y': y + int(board_size/2),
                 'width': board_size,
                 'height': board_size}

            image.save(f"{self.output_dir}/{dataset}/{image_f.name}")
            self.anno[dataset].append({
                'image': image_f.name,
                'annotations': [{'label': 'chessboard', "coordinates": coord}]
            })

    def save_annotations(self):
        for o in ['train', 'test', 'valid']:
            with open(f'{self.output_dir}/{o}/{o}.json', 'w') as json_file:
                json.dump(self.anno[o], json_file)

    def _render_board(self, board, size):
        s = chess.svg.board(board,
                            size=size,
                            coordinates=randint(0, 1),
                            orientation=randint(0, 1))
        return svg2png(bytestring = s)

# Cell
def get_images(folder):
    return [_ for _ in data.glob(f"{folder}/*.jpg") if not _.name.startswith('._')]

train_imgs = get_images('train')
test_imgs = get_images('test')
val_imgs = get_images('valid')

# Cell
a = list(zip_longest(train_imgs, [], fillvalue='train'))
b = list(zip_longest(test_imgs, [], fillvalue='test'))
c = list(zip_longest(val_imgs, [], fillvalue='valid'))
a.extend(b)
a.extend(c)
comps = zip([_[0] for _ in a], [_[1] for _ in a], boards)